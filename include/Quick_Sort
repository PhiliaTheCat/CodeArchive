#ifndef __INCLUDE_QUICK_SORT__
    #define __INCLUDE_QUICK_SORT__

    #include "Iterator_Traits"

    // Direct Insertion Requirement
    #define __BOUND int(32)

    namespace ptc
    {
        template<class RandomIterator, class Cmpfunc> void Quick_Sort(RandomIterator begin, RandomIterator end, Cmpfunc cmp);

        template<class RandomIterator, class Cmpfunc> void Quick_Sort(RandomIterator begin, RandomIterator end, Cmpfunc cmp)
        {
            typedef typename Iterator_Traits<RandomIterator>::value_type value_type;

            if (end - begin <= 1)
                return;
            
            // Direct Insertion Sort if short enough
            if (end - begin <= __BOUND)
            {
                for (RandomIterator i = begin + 1; i < end; i += 1)
                {
                    RandomIterator j = i;
                    value_type cache = *i;
                    while (j > begin && cmp(cache, *(j - 1)))
                    {
                        *j = *(j - 1);
                        j -= 1;
                    }
                    *j = cache;
                }
                return;
            }

            RandomIterator p = begin, q = end - 1;
            RandomIterator tag = begin + (end - begin) / 2;
            value_type temp = *tag;
            while (1)
            {
                while (!cmp(temp, *p) && p < tag)
                    p += 1;
                while (!cmp(*q, temp) && q > tag)
                    q -= 1;
                if (p < q)
                {
                    value_type cache = *p;
                    *p = *q;
                    *q = cache;
                    if (p == tag)
                        tag = q;
                    else if (q == tag)
                        tag = p;
                }
                else 
                    break;
            }
            Quick_Sort(begin, p, cmp);
            Quick_Sort(p + 1, end, cmp);
        }
    }
#endif
