#ifndef __INCLUDE_QUICK_SORT__
    #define __INCLUDE_QUICK_SORT__

    #define __BOUND 32

    template<class TpSort, class TpFunc> void Quick_Sort(TpSort arr[], int l, int r, bool (*To_Swap)(TpFunc, TpFunc));

    template<class TpSort, class TpFunc> void Quick_Sort(TpSort arr[], int l, int r, bool (*To_Swap)(TpFunc, TpFunc))
    {
        if (l >= r)
            return;
        
        // Direct Insertion Sort if short enough
        if (r - l + 1 <= __BOUND)
        {
            for (int i = l + 1; i <= r; i += 1)
            {
                int j = i;
                TpSort cache = arr[i];
                while (j > l && To_Swap(arr[j - 1], cache))
                {
                    arr[j] = arr[j - 1];
                    j -= 1;
                }
                arr[j] = cache;
            }
            return;
        }

        int p = l, q = r;
        int tag = (l + r) / 2;
        TpSort temp = arr[tag];
        while (1)
        {
            while (!To_Swap(arr[p], temp) && p < tag)
                p += 1;
            while (!To_Swap(temp, arr[q]) && q > tag)
                q -= 1;
            if (p < q)
            {
                TpSort cache = arr[p];
                arr[p] = arr[q];
                arr[q] = cache;
                if (p == tag)
                    tag = q;
                else if (q == tag)
                    tag = p;
            }
            else 
                break;
        }
        Quick_Sort(arr, l, p - 1, To_Swap);
        Quick_Sort(arr, p + 1, r, To_Swap);
    }
#endif
