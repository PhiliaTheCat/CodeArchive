#ifndef __INCLUDE_COMPLEX__
    #define __INCLUDE_COMPLEX__

    #include <iostream>

    using namespace std;

    class Complex // Formally, a + bi
    {
        private:
            double __a;
            double __b;

        public:
            Complex(const double &a = 0, const double &b = 0);
            Complex(const Complex &tar);

            double mod(); // Module of a complex

            Complex &operator =(const Complex &tar);
            
            bool operator ==(const Complex &sec);

            Complex operator +(const Complex &sec);
            Complex operator +(const double &sec);
            friend Complex operator +(const double &fst, const Complex &sec);

            Complex &operator +=(const Complex &sec);
            Complex &operator +=(const double &sec);

            Complex operator -();
            Complex operator -(const Complex &sec);
            Complex operator -(const double &sec);
            friend Complex operator -(const double &fst, const Complex &sec);

            Complex &operator -=(const Complex &sec);
            Complex &operator -=(const double &sec);

            Complex operator *(const Complex &sec);
            Complex operator *(const double &sec);
            friend Complex operator *(const double &fst, const Complex &sec);

            Complex &operator *=(const Complex &sec);
            Complex &operator *=(const double &sec);

            Complex operator /(const Complex &sec);
            Complex operator /(const double &sec);
            friend Complex operator /(const double &fst, const Complex &sec);

            Complex &operator /=(const Complex &sec);
            Complex &operator /=(const double &sec);

            friend ostream &operator <<(ostream &tar, const Complex &sample);            

            ~Complex();
    };
#endif
