#ifndef __INCLUDED_MODULUS__
#define __INCLUDED_MODULUS__

#include <cstdint> // For std::int32_t
#include <istream> // For std::istream
#include <ostream> // For std::ostream

namespace ptc
{
    template<std::int32_t Lim>
    class Modulus
    {
    private:
        std::int32_t val;

    public:
        Modulus() = default;

        explicit Modulus(const std::int32_t &src)
        {
            val = src % Lim;
            if (val < 0)
                val += Lim;
        }

        Modulus(const Modulus &) = default;

        Modulus(Modulus &&) = default;

        ~Modulus() = default;

        Modulus &operator =(const Modulus &) = default;

        Modulus &operator =(Modulus &&) = default;

        Modulus operator +() const
        {
            return *this;
        }

        Modulus operator -() const
        {
            return Modulus(-val);
        }

        friend bool operator ==(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val == rhs.val;
        }

        friend bool operator !=(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val != rhs.val;
        }

        friend bool operator >(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val > rhs.val;
        }

        friend bool operator >=(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val >= rhs.val;
        }

        friend bool operator <(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val < rhs.val;
        }

        friend bool operator <=(const Modulus &lhs, const Modulus &rhs)
        {
            return lhs.val <= rhs.val;
        }

        friend Modulus operator +(const Modulus &lhs, const Modulus &rhs)
        {
            return Modulus(lhs.val + rhs.val);
        }

        friend Modulus &operator +=(Modulus &lhs, const Modulus &rhs)
        {
            lhs.val += rhs.val;
            if (lhs.val >= Lim)
                lhs.val -= Lim;

            return lhs;
        }

        friend Modulus operator -(const Modulus &lhs, const Modulus &rhs)
        {
            return Modulus(lhs.val - rhs.val);
        }

        friend Modulus &operator -=(Modulus &lhs, const Modulus &rhs)
        {
            lhs.val -= rhs.val;
            if (lhs.val < 0)
                lhs.val += Lim;

            return lhs;
        }

        friend Modulus operator *(const Modulus &lhs, const Modulus &rhs)
        {
            return Modulus(lhs.val * rhs.val);
        }

        friend Modulus &operator *=(Modulus &lhs, const Modulus &rhs)
        {
            lhs.val *= rhs.val;
            if (lhs.val >= Lim)
                lhs.val %= Lim;

            return lhs;
        }

        friend std::istream &operator >>(std::istream &lhs, Modulus &rhs)
        {
            lhs >> rhs.val;

            rhs.val %= Lim;
            if (rhs.val < 0)
                rhs.val += Lim;

            return lhs;
        }

        friend std::ostream &operator <<(std::ostream &lhs, const Modulus &rhs)
        {
            lhs << rhs.val;

            return lhs;
        }
    };
}

#endif
