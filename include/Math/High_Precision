#ifndef __INCLUDED_HIGH_PRECISION__
#define __INCLUDED_HIGH_PRECISION__

#include <cstdint>

namespace ptc
{
    static const uint32_t __HIGH_PRECISION_ARR_SIZE = 1024;

    template<std::uint32_t Unit = std::uint32_t(1e4)>
    class High_Precision;

    template<std::uint32_t Unit>
    High_Precision<Unit> operator +(const uint64_t &lhs, const High_Precision<Unit> &rhs);

    template<std::uint32_t Unit>
    class High_Precision
    {
        private:
        bool sign;
        uint32_t arr[__HIGH_PRECISION_ARR_SIZE];
        uint16_t n;

        public:
        inline High_Precision(const int64_t &src = 0)
        : arr{}
        {
            uint64_t p;
            if (src >= 0)
            {
                sign = false;
                p = src;
            }
            else 
            {
                sign = true;
                p = -src;
            }

            int i = 0;
            while (p > 0)
            {
                arr[i] = p % 1000;
                p /= 1000;
                i += 1;
            }

            n = i;
        }

        inline High_Precision(const High_Precision &src)
        : sign(src.sign), n(src.n), arr{}
        {
            for (int i = 0; i < n; i += 1)
                arr[i] = src.arr[i];
        }

        inline High_Precision &operator =(const High_Precision &src)
        {
            if (&src == *this)
                return *this;

            sign = src.sign;
            n = src.n;
            for (int i = 0; i < n; i += 1)
                arr[i] = src.arr[i];

            return *this;
        }

        High_Precision operator +(const High_Precision &rhs) const
        {
            High_Precision res;
            int p;

            if (n >= rhs.n)
                p = rhs.n;
            else 
                p = n;
            
            bool flag = 0;
            for (int i = 0; i < p; i += 1)
            {
                res.arr[i] = arr[i] + rhs.arr[i] + flag;
                if (res.arr[i] >= Unit)
                {
                    res.arr[i] -= Unit;
                    flag = true;
                }
                else 
                    flag = false;
            }

            if (n >= rhs.n)
            {
                for (int i = p; i < n; i += 1)
                {
                    res.arr[i] = arr[i] + flag;
                    if (res.arr[i] >= Unit)
                    {
                        res.arr[i] -= Unit;
                        flag = true;
                    }
                    else 
                        flag = false;
                }
            }
            else 
            {
                for (int i = p; i < lhs.n; i += 1)
                {
                    res.arr[i] = lhs.arr[i] + flag;
                    if (res.arr[i] >= Unit)
                    {
                        res.arr[i] -= Unit;
                        flag = true;
                    }
                    else 
                        flag = false;
                }
            }

            if (flag)
            {
                if (n >= rhs.n)
                {
                    res.arr[n] = 1;
                    res.n = n + 1;
                }
                else
                {
                    res.arr[rhs.n] = 1;
                    res.n = rhs.n + 1;
                }
            }
            else 
            {
                if (n >= rhs.n)
                    res.n = n;
                else 
                    res.n = rhs.n;
            }

            return res;
        }
    };
}

#endif
