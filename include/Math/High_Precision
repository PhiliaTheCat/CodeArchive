#ifndef __INCLUDED_HIGH_PRECISION__
#define __INCLUDED_HIGH_PRECISION__

#include <cstdint>
#include <bitset>
#include <ostream>

namespace ptc
{
    template<std::uint16_t __LENGTH = 1024>
    class High_Precision
    {
        private:
        std::bitset<__LENGTH> __bit;

        public:
        inline High_Precision(const std::int64_t &src = 0)
        : __bit(src)
        {
            if (src < 0)
            {
                for (int i = 64; i < __LENGTH; i += 1)
                    __bit[i] = 1;
            }
        }

        inline High_Precision(const High_Precision &src)
        : __bit(src.__bit)
        {}

        inline High_Precision(High_Precision &&src)
        : __bit(src.__bit)
        {}

        inline High_Precision &operator =(const High_Precision &rhs)
        {
            __bit = rhs.__bit;
            return *this;
        }

        inline High_Precision &operator =(High_Precision &&rhs)
        {
            __bit = rhs.__bit;
            return *this;
        }

        friend inline High_Precision operator +(const High_Precision &rhs)
        {
            return rhs;
        }

        friend inline High_Precision operator +(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision res;
            bool carry = false;
            for (int i = 0; i < __LENGTH; i += 1)
            {
                res.__bit[i] = lhs.__bit[i] ^ rhs.__bit[i] ^ carry;
                carry = lhs.__bit[i] & rhs.__bit[i] |
                        lhs.__bit[i] & carry |
                        rhs.__bit[i] & carry;
            }
            return res;
        }

        friend inline High_Precision &operator +=(High_Precision &lhs, const High_Precision &rhs)
        {
            bool carry = false;
            bool temp;
            for (int i = 0; i < __LENGTH; i += 1)
            {
                temp = carry ^ lhs.__bit[i] ^ rhs.__bit[i];
                carry = lhs.__bit[i] & rhs.__bit[i] |
                        lhs.__bit[i] & carry |
                        rhs.__bit[i] & carry;
                lhs.__bit[i] = temp;
            }
            return lhs;
        }

        friend inline High_Precision operator -(const High_Precision &rhs)
        {
            High_Precision res = rhs;
            res.__bit.flip();
            res += 1;
            return res;
        }

        friend inline High_Precision operator -(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision temp = rhs;
            temp.__bit.flip();
            temp += 1;
            return lhs + temp;
        }

        friend inline High_Precision &operator -=(High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision temp = rhs;
            temp.__bit.flip();
            temp += 1;
            lhs += temp;
            return lhs;
        }

        friend inline bool operator ==(const High_Precision &lhs, const High_Precision &rhs)
        {
            return lhs.__bit == rhs.__bit;
        }

        friend inline bool operator !=(const High_Precision &lhs, const High_Precision &rhs)
        {
            return lhs.__bit != rhs.__bit;
        }

        friend inline bool operator >(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision res = lhs - rhs;
            if (!res.__bit[__LENGTH - 1] && res != High_Precision(0))
                return true;
            else 
                return false;
        }

        friend inline bool operator <(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision res = lhs - rhs;
            if (res.__bit[__LENGTH - 1])
                return true;
            else 
                return false;
        }

        friend inline bool operator >=(const High_Precision &lhs, const High_Precision &rhs)
        {
            return !(lhs < rhs);
        }

        friend inline bool operator <=(const High_Precision &lhs, const High_Precision &rhs)
        {
            return !(lhs > rhs);
        }

        friend inline High_Precision operator >>(const High_Precision &lhs, const uint16_t &rhs)
        {
            High_Precision res;
            res.__bit = lhs.__bit >> rhs;
            return res;
        }

        friend inline High_Precision operator <<(const High_Precision &lhs, const uint16_t &rhs)
        {
            High_Precision res;
            res.__bit = lhs.__bit << rhs;
            return res;
        }        
        
        friend inline High_Precision &operator >>=(High_Precision &lhs, const uint16_t &rhs)
        {
            lhs.__bit >>= rhs;
            return lhs;
        }

        friend inline High_Precision &operator <<=(High_Precision &lhs, const uint16_t &rhs)
        {
            lhs.__bit <<= rhs;
            return lhs;
        }

        friend inline High_Precision operator *(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision res;
            High_Precision temp = lhs;
            for (int i = 0; i < __LENGTH; i += 1)
            {
                if (rhs.bit[i])
                    res += temp;
                temp << 1;
            }
            return res;
        }
    
        friend inline High_Precision &operator *=(High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision temp = lhs;
            lhs = 0;
            for (int i = 0; i < __LENGTH; i += 1)
            {
                if (rhs.__bit[i])
                    lhs += temp;
                temp << 1;
            }
            return lhs;
        }
    
        friend inline High_Precision operator /(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision l, r;
            High_Precision res;
            if (lhs >= 0)
                l = lhs;
            else 
                l = -lhs;
            if (rhs >= 0)
                r = rhs;
            else 
                r = -rhs;

            int i = 0;
            while (r < l)
            {
                r <<= 1;
                i += 1;
            }
            
            while (i > -1)
            {
                if (l >= r)
                {
                    res.__bit[i] = 1;
                    l -= r;
                }
                else 
                    res.__bit[i] = 0;
                r >>= 1;
                i -= 1;
            }

            if (lhs >= 0)
            {
                if (rhs > 0)
                    return res;
                else 
                    return -res;
            }
            else 
            {
                if (rhs > 0)
                    return -res;
                else 
                    return res;
            }
        }

        friend inline High_Precision operator %(const High_Precision &lhs, const High_Precision &rhs)
        {
            High_Precision l, r;
            if (lhs >= 0)
                l = lhs;
            else 
                l = -lhs;
            if (rhs >= 0)
                r = rhs;
            else 
                r = -rhs;
            
            int i = 0;
            while (r < l)
            {
                i += 1;
                r <<= 1;
            }
            
            while (i > -1)
            {
                if (l >= r)
                    l -= r;
                r >>= 1;
                i -= 1;
            }

            return l;
        }

        friend inline High_Precision &operator /=(High_Precision &lhs, const High_Precision &rhs)
        {
            lhs = lhs / rhs;
            return lhs;
        }

        friend inline High_Precision &operator %=(High_Precision &lhs, const High_Precision &rhs)
        {
            lhs = lhs % rhs;
            return lhs;
        }

        friend inline std::istream &operator >>(std::istream &lhs, High_Precision &rhs)
        {
            char buff[__LENGTH / 3 + 2];
            lhs >> buff;

            int i = 0;
            bool sign = false;

            rhs = 0;

            while (buff[i] != 0)
            {
                if (i == 0 && buff[i] == '-')
                {
                    sign = true;
                    i += 1;
                    continue;
                }
                rhs = (rhs << 1) + (rhs << 3);
                rhs += buff[i] - '0';
                i += 1;
            }

            return lhs;
        }

        friend inline std::ostream &operator <<(std::ostream &lhs, const High_Precision &rhs)
        {
            char buff[__LENGTH / 3];
            High_Precision t, r;
            if (rhs < 0)
            {
                lhs << '-';
                t = -rhs;
            }
            else 
                t = rhs;
            int l = 0;
            for (int i = 0; i < __LENGTH / 3; i += 1)
            {
                if (t == 0)
                {
                    l = i;
                    break;
                }
                r = t % 10;
                t /= 10;
                buff[i] = r.__bit[0] + 2 * r.__bit[1] + 4 * r.__bit[2] + 8 * r.__bit[3] + '0';
            }

            if (l == 0)
                lhs << '0';
            else
            {
                for (int i = l - 1; i > -1; i -= 1)
                    lhs << buff[i];
            }
            return lhs;
        }
    };
}

#endif
