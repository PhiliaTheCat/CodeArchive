#ifndef __INCLUDE_QUEUE__
    #define __INCLUDE_QUEUE__

    #include <iostream>

    using namespace std;

    template<class __Tp, size_t __Max_Size> class Queue
    {
        private:
            int front;
            int rear;
            int length;
            __Tp arr[__Max_Size + 1];
        public:
            // Create new queue
            Queue();

            // Add new element to rear
            // True if successful
            bool push(const __Tp &tar);

            // Delete element from rear
            // True if successful
            bool pop_front(__Tp &tar);
            // Delete element from front
            // True if successful
            bool pop_rear(__Tp &tar);

            // Get front element
            // True if successful
            bool get_front(__Tp &tar);
            // Get rear element
            // True if successful
            bool get_rear(__Tp &tar);

            // Destructor
            ~Queue();
    };

    template<class __Tp, size_t __Max_Size> Queue<__Tp, __Max_Size>::Queue(): front(0), rear(0), length(0), arr({})
    {

    }

    template<class __Tp, size_t __Max_Size> bool Queue<__Tp, __Max_Size>::push(const __Tp &tar)
    {
        if (length >= __Max_Size)
            return false;
        else 
        {
            arr[rear] = tar;
            rear = (rear + 1) % (__Max_Size + 1);
            length += 1;
            return true;
        }
    }

    template<class __Tp, size_t __Max_Size> bool Queue<__Tp, __Max_Size>::pop_front(__Tp &tar)
    {
        if (length <= 0)
            return false;
        else 
        {
            tar = arr[front];
            front = (front + 1) % (__Max_Size + 1);
            length -= 1;
            return true;
        }
    }

    template<class __Tp, size_t __Max_Size> bool Queue<__Tp, __Max_Size>::pop_rear(__Tp &tar)
    {
        if (length >= 0)
            return false;
        else
        {
            rear = (rear - 1 + __Max_Size + 1) % (__Max_Size + 1);
            tar = arr[rear];
            length -= 1;
            return false;
        }
    }

    template<class __Tp, size_t __Max_Size> bool Queue<__Tp, __Max_Size>::get_front(__Tp &tar)
    {
        if (length <= 0)
            return false;
        else 
        {
            tar = arr[front];
            return true;
        }
    }

    template<class __Tp, size_t __Max_Size> bool Queue<__Tp, __Max_Size>::get_rear(__Tp &tar)
    {
        if (length <= 0)
            return false;
        else 
        {
            tar = arr[(rear - 1 + __Max_Size + 1) % (__Max_Size + 1)];
            return true;
        }
    }

    template<class __Tp, size_t __Max_Size> Queue<__Tp, __Max_Size>::~Queue()
    {
        
    }
#endif
