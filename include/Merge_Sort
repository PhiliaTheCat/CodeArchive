#ifndef __INCLUDED_MERGE_SORT__
    #define __INCLUDED_MERGE_SORT__

    #include "Iterator_Traits"

    // Iteration Depth Control
    #define __MAX_DEPTH int(64)
    
    namespace ptc
    {
        template<class RandomIterator, class Cmpfunc> void Merge_Sort(RandomIterator begin, RandomIterator end, Cmpfunc cmp);

        template<class RandomIterator, class Cmpfunc> void Merge_Sort(RandomIterator begin, RandomIterator end, Cmpfunc cmp)
        {
            typedef typename Iterator_Traits<RandomIterator>::value_type value_type;

            // Initiate Stack
            struct Stack_Element
            {
                RandomIterator begin;
                RandomIterator end;
                int status;
            };
            Stack_Element *stack = new Stack_Element [__MAX_DEPTH];
            int sp = -1;

            // Initialize
            sp += 1;
            stack[sp].begin = begin;
            stack[sp].end = end;
            stack[sp].status = 0;

            // Process
            while (sp > -1)
            {
                if (stack[sp].end - stack[sp].begin <= 1)
                {
                    sp -= 1;
                    continue;
                }
                begin = stack[sp].begin;
                end = stack[sp].end;
                RandomIterator middle = begin + (end - begin) / 2;
                int &status = stack[sp].status;
                if (status == 0)
                // Process left node
                {
                    status += 1;
                    sp += 1;
                    stack[sp].begin = begin;
                    stack[sp].end = middle;
                    stack[sp].status = 0;
                }
                else if (status == 1)
                // Process right node
                {
                    status += 1;
                    sp += 1;
                    stack[sp].begin = middle;
                    stack[sp].end = end;
                    stack[sp].status = 0;
                }
                else 
                // Process current node
                {
                    // Create cache
                    value_type *cache = new value_type [end - begin];
                    RandomIterator i = begin;
                    RandomIterator j = middle;
                    int k = 0;
                    // Fill in
                    while (i < middle && j < end)
                    {
                        if (cmp(*j, *i))
                        {
                            cache[k] = *j;
                            j += 1;
                            k += 1;
                        }
                        else 
                        {
                            cache[k] = *i;
                            i += 1;
                            k += 1;
                        }
                    }
                    // Fill in remained
                    while (i < middle)
                    {
                        cache[k] = *i;
                        i += 1;
                        k += 1;
                    }
                    while (j < end)
                    {
                        cache[k] = *j;
                        j += 1;
                        k += 1;
                    }
                    // Write back
                    for (i = begin, k = 0; i < end; i += 1, k += 1)
                        *i = cache[k];
                    delete [] cache;
                    // Return
                    sp -= 1;
                }
            }
            delete [] stack;
        }
    }
#endif
